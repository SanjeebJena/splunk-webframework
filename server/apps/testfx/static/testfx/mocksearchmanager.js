// Copyright 2012 Splunk, Inc.

define(function(require, exports, module) {
    var _ = require("underscore");
    var mvc = require('splunkjs/mvc');
    var BaseManager = require('splunkjs/mvc/basemanager');
    var MockDataSource = require('./mockdatasource');
    var SingleMockDataSource = require('./singlemockdatasource');
    var ResultTableMockDataSource = require('./resulttablemockdatasource');
    var SearchBarMockDataSource = require('./searchbarmockdatasource');
    var TimepickerMockDataSource = require('./timepickermockdatasource');
    var TimelineMockDataSource = require('./timelinemockdatasource');
    var EventTableMockDataSource = require('./eventtablemockdatasource');
    var FormsMockDataSource = require('./formsmockdatasource');
    var ChartMockDataSource = require('./chartmockdatasource');
    var GoogleMapDataSource = require('./googlemapmockdatasource');
    var SearchModels    = require('splunkjs/mvc/searchmodel');
    
    // This is generated by executing "index=_internal | head 10 | stats count by sourcetype" from the REST API
    // with output_mode=json
    var JOB_PROPERTIES = {"links":{},"origin":"https://localhost:8089/servicesNS/-/-/search/jobs","updated":"2013-06-18T16:15:53-07:00","generator":{"build":"167932","version":"20130617"},"entry":[{"name":"search index=_internal | head 100 | stats count by sourcetype","id":"https://localhost:8089/servicesNS/-/-/search/jobs/1371597337.535","updated":"2013-06-18T16:15:53.000-07:00","links":{"alternate":"/servicesNS/-/-/search/jobs/1371597337.535","search.log":"/servicesNS/-/-/search/jobs/1371597337.535/search.log","events":"/servicesNS/-/-/search/jobs/1371597337.535/events","results":"/servicesNS/-/-/search/jobs/1371597337.535/results","results_preview":"/servicesNS/-/-/search/jobs/1371597337.535/results_preview","timeline":"/servicesNS/-/-/search/jobs/1371597337.535/timeline","summary":"/servicesNS/-/-/search/jobs/1371597337.535/summary","control":"/servicesNS/-/-/search/jobs/1371597337.535/control"},"published":"2013-06-18T16:15:37.000-07:00","author":"admin","content":{"canSummarize":"0","cursorTime":"2013-06-18T16:15:27.000-07:00","defaultSaveTTL":"604800","defaultTTL":"600","delegate":"","diskUsage":544768,"dispatchState":"DONE","doneProgress":1,"dropCount":0,"earliestTime":"2013-05-28T10:48:08.000-07:00","eventAvailableCount":100,"eventCount":100,"eventFieldCount":51,"eventIsStreaming":true,"eventIsTruncated":false,"eventSearch":"search index=_internal  | head 100 ","eventSorting":"desc","indexEarliestTime":1371597325,"indexLatestTime":1371597335,"isBatchModeSearch":false,"isDone":true,"isFailed":false,"isFinalized":false,"isPaused":false,"isPreviewEnabled":true,"isRealTimeSearch":false,"isRemoteTimeline":false,"isSaved":false,"isSavedSearch":false,"isZombie":false,"keywords":"index::_internal","label":"","normalizedSearch":"search index=_internal | fields keepcolorder=t * _bkt _cd _si host index linecount prestats_reserved_* psrsvd_* source sourcetype splunk_server | prehead keeplast=false limit=100 null=false","numPreviews":0,"pid":"20909","priority":5,"remoteSearch":"litsearch index=_internal | fields  keepcolorder=t \"*\" \"_bkt\" \"_cd\" \"_si\" \"host\" \"index\" \"linecount\" \"prestats_reserved_*\" \"psrsvd_*\" \"source\" \"sourcetype\" \"splunk_server\" | prehead  limit=100 null=false keeplast=false","reportSearch":"stats  count by sourcetype","resultCount":2,"resultIsStreaming":false,"resultPreviewCount":2,"runDuration":0.248000,"scanCount":422,"sid":"1371597337.535","statusBuckets":300,"ttl":600,"performance":{"command.fields":{"duration_secs":0.002000,"invocations":2,"input_count":422,"output_count":422},"command.head":{"duration_secs":0.001000,"invocations":2,"input_count":100,"output_count":100},"command.prehead":{"duration_secs":0.007000,"invocations":2,"input_count":422,"output_count":100},"command.search":{"duration_secs":0.045000,"invocations":2,"input_count":0,"output_count":422},"command.search.calcfields":{"duration_secs":0.002000,"invocations":2,"input_count":422,"output_count":422},"command.search.fieldalias":{"duration_secs":0.002000,"invocations":2,"input_count":422,"output_count":422},"command.search.index":{"duration_secs":0.003000,"invocations":2},"command.search.index.usec_1_8":{"invocations":4},"command.search.index.usec_8_64":{"invocations":2},"command.search.kv":{"duration_secs":0.022000,"invocations":2},"command.search.lookups":{"duration_secs":0.002000,"invocations":2,"input_count":422,"output_count":422},"command.search.rawdata":{"duration_secs":0.009000,"invocations":2},"command.search.summary":{"invocations":2},"command.search.tags":{"duration_secs":0.002000,"invocations":2,"input_count":422,"output_count":422},"command.search.typer":{"duration_secs":0.011000,"invocations":2,"input_count":422,"output_count":422},"command.stats.execute_input":{"duration_secs":0.002000,"invocations":2},"command.stats.execute_output":{"duration_secs":0.001000,"invocations":1},"dispatch.check_disk_usage":{"duration_secs":0.001000,"invocations":1},"dispatch.createProviderQueue":{"duration_secs":0.034000,"invocations":1},"dispatch.evaluate":{"duration_secs":0.073000,"invocations":1},"dispatch.evaluate.head":{"duration_secs":0.001000,"invocations":1},"dispatch.evaluate.search":{"duration_secs":0.071000,"invocations":1},"dispatch.evaluate.stats":{"duration_secs":0.001000,"invocations":1},"dispatch.fetch":{"duration_secs":0.052000,"invocations":2},"dispatch.results_combiner":{"duration_secs":0.002000,"invocations":2},"dispatch.stream.local":{"duration_secs":0.051000,"invocations":2},"dispatch.timeline":{"duration_secs":0.077000,"invocations":2},"dispatch.writeStatus":{"duration_secs":0.010000,"invocations":5},"startup.handoff":{"duration_secs":0.084000,"invocations":1}},"fieldMetadataStatic":{"sourcetype":{"type":"unknown","groupby_rank":"0"}},"fieldMetadataResults":{"sourcetype":{"type":"unknown","groupby_rank":"0"}},"messages":[],"request":{"adhoc_search_level":"verbose","auto_cancel":"100","custom.search":"index=_internal | head 100 | stats count by sourcetype","earliest_time":"","latest_time":"","preview":"1","rf":"*","search":"search index=_internal | head 100 | stats count by sourcetype","status_buckets":"300","timeFormat":"%s.%Q","ui_dispatch_app":"search"},"custom":{"display.general.type":"statistics","display.statistics.sortColumn":"count","display.statistics.sortDirection":"desc","search":"index=_internal | head 100 | stats count by sourcetype"},"runtime":{"auto_cancel":"100","auto_pause":"0"},"searchProviders":["octavian.splunk.local-ineeman"]},"acl":{"perms":{"read":["admin"],"write":["admin"]},"owner":"admin","modifiable":true,"sharing":"global","app":"search","can_write":true,"ttl":"600"}}],"paging":{"total":1,"perPage":0,"offset":0}};
    
    var MockSearchManager = BaseManager.extend({

        constructor: function(options) {
            // This has to be in the constructor, otherwise
            // we will call Model.set before we have created these sub-models.
            this.query = options.queryModel || new SearchModels.SearchQuery();
            this.search = options.searchModel || new SearchModels.SearchJob({label: options.id});
            
            // No need to set it on our model
            delete options.queryModel;
            delete options.searchModel;
            
            return BaseManager.prototype.constructor.apply(this, arguments);
        },

        initialize: function(options) {
            this.type = "standard";
            if('type' in options){
                this.type = options['type'];
                this.query.set({"search":"mock context - dummy search string"});
            }
        },
        
        start: function() {  
            var that = this;
            _.defer(function(){
                that.trigger("search:done", JOB_PROPERTIES.entry[0]); 
            })    
            return this;
        },
        
        data: function(source, attrs) {
            attrs = attrs || {};
            attrs.context = this;
            attrs.source = source;

            var datasource = null;
            switch(this.type){
                case "single":
                    datasource = new SingleMockDataSource(attrs);
                    break;
                case "resulttable":
                    datasource = new ResultTableMockDataSource(attrs);
                    break;
                case "searchbar":
                    datasource = new SearchBarMockDataSource(attrs);
                    break;
                case "timepicker":
                    datasource = new TimepickerMockDataSource(attrs);
                    break;
                case "timeline":
                    datasource = new TimelineMockDataSource(attrs);
                    break;
                case "eventtable":
                    datasource = new EventTableMockDataSource(attrs);
                    break;
                case "forms":
                    datasource = new FormsMockDataSource(attrs);
                    break;
                case "chart":
                    datasource = new ChartMockDataSource(attrs);
                    break;
                case "googlemap":
                    datasource = new GoogleMapDataSource(attrs);
                    break;
                default:
                    datasource = new MockDataSource(attrs);
                    break;
            }
            return datasource;
        },

        set: function(key, value, options) {
            var attrs;

            // Normalize the key-value into an object
            if ((_.isObject(key) && !_.isArray(key)) || key == null) {
                attrs = key;
                options = value;
            } else {
                attrs = {};
                attrs[key] = value;
            }
            
            var search = {};
            var query = {};
            
            // If the 'search' or 'query' input attributes are present
            // then use them as the base set of output attributes for
            // each respective model (and filter them out of the original
            // input attributes).
            if (_.has(attrs, "search") && _.isObject(attrs.search)) {
                search = attrs.search;
                delete attrs.search;
            }
            if (_.has(attrs, "query") && _.isObject(attrs.query)) {
                query = attrs.query;
                delete attrs.query;
            }
            
            // Partition all remaining input attributes based on whether they
            // are destined for the job model or the query model.
            // Ignore input attributes that are unrecognized.
            search = _.extend(search, _.pick(attrs, SearchModels.SearchJob.ALLOWED_ATTRIBUTES));
            query = _.extend(query, _.pick(attrs, SearchModels.SearchQuery.ALLOWED_ATTRIBUTES));
                
            // Finally, we set it on the child models, if there is anything to
            // set
            if (!_.isEmpty(search)) {
                this.search.set(search, options);
            }
            if (!_.isEmpty(query)) {
                this.query.set(query, options);
            }
            
            return BaseManager.prototype.set.call(this, attrs, options);
        },

        switchData: function(type) {
            
        },
        
        replayLastSearchEvent: function() {
            
        }
    });
    
    return MockSearchManager;
});
