define(function(require, exports, module) {
    var _ = require("underscore");
    var Backbone = require("backbone");
    var console = require("util/console");
    var BaseTokenModel = require("./basetokenmodel");
    
    /**
     * Contains a set of globally-registered instances.
     * 
     * Currently instances consist of components and token models, but may
     * include other types in the future.
     */
    var Registry = Backbone.Model.extend({
        initialize: function() {
            // We always create a single model called 'default' - it is used
            // as the default token model
            this.registerInstance("default", this._createTokenModel("default"));
        },
        
        createError: function(message) {
            return message;
        },
        
        registerInstance: function(name, component) {
            if (this.has(name)) {
                throw new Error(this.createError("Already have instance with name: " + name));
            }
            
            this.set(name, component);
        },

        revokeInstance: function(name, options) {
            this.unset(name, options);
        },
        
        hasInstance: function(name) {
            return this.has(name);
        },
        
        /**
         * @param name              The name of the instance to return.
         * @param options           (Optional).
         * @param options.create    Whether to create a new token model with
         *                          the given name if the specified instance
         *                          does not exist.
         * @return                  The specified instance, or a falsy value
         *                          if the instance does not exist and
         *                          options.create is omitted or false.
         */
        getInstance: function(name, options) {
            options = options || {};
            
            // If an instance with this name doesn't exist,
            // figure out whether we want to create one or not.
            if (!this.has(name)) {
                if (options.create) {
                    this.registerInstance(name, this._createTokenModel(name));
                }
                else {
                    console.error(this.createError("No instance with name: " + name));
                }
            }
            
            return this.get(name);
        },
        
        getInstances: function() {
            return _.values(this.attributes);
        },
        
        getInstanceNames: function() {
            return _.keys(this.attributes);
        },

        _createTokenModel: function(name) {
            var namespaceModel = new BaseTokenModel();
            namespaceModel.id = name;
            return namespaceModel;
        }
    });
    
    return Registry;
});
